# Copyright (C) Lightbend Inc. <https://www.lightbend.com>

# Lib for CI scripts

set -e
set -o pipefail

DIR=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )
BASEDIR=$DIR/..
export DOCUMENTATION=$BASEDIR/documentation

export CURRENT_BRANCH=${TRAVIS_BRANCH}

EXTRA_OPTS=""

# Check if it is a scheduled build
if [ "$TRAVIS_EVENT_TYPE" = "cron" ]; then
    # `sort` is not necessary, but it is good to make it predictable.
    AKKA_VERSION=$(curl -s https://repo.akka.io/snapshots/com/typesafe/akka/akka-actor_2.12/ | grep -oEi '2\.5-[0-9]{8}-[0-9]{6}' | sort | tail -n 1)

    echo "Using Akka SNAPSHOT ${AKKA_VERSION}"

    EXTRA_OPTS="-Dakka.version=${AKKA_VERSION}"
fi

printMessage() {
  echo "[info]"
  echo "[info] ---- $1"
  echo "[info]"
}

runSbt() {
  sbt ${EXTRA_OPTS} --warn 'set concurrentRestrictions in Global += Tags.limitAll(1)' "$@" | grep --line-buffered -v 'Resolving \|Generating '
}

runSbtNoisy() {
  sbt ${EXTRA_OPTS} 'set concurrentRestrictions in Global += Tags.limitAll(1)' "$@" | grep --line-buffered -v 'Resolving \|Generating '
}

# Runs code formating validation in the current directory
scalafmtValidation() {
  printMessage "VALIDATE SCALA CODE FORMATTING"
  runSbtNoisy +scalafmtAll scalafmtSbt
  git diff --exit-code || (
    echo "[error] ERROR: Scalafmt test failed for $1 source."
    echo "[error] To fix, format your sources using 'sbt scalafmtAll scalafmtAll' before submitting a pull request."
    false
  )
}

# Runs code formating validation in the current directory
javafmtValidation() {
  printMessage "VALIDATE JAVA CODE FORMATTING"
  runSbtNoisy javafmt test:javafmt
  git diff --exit-code || (
    echo "[error] ERROR: javafmt check failed for $1 source, see differences above."
    echo "[error] To fix, format your sources using 'sbt javafmt test:javafmt' before submitting a pull request."
    false
  )
}
